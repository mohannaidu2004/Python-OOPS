# -*- coding: utf-8 -*-
"""OOPS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kyYRBcXYginT2rtnrJ-PZhvgGj_0nLqw
"""

#Class Creation , access class through odject
class dog:
  def features(self):
    print("German shepard")
    print("Austria")

animal = dog()
animal.features()

#passing parameters to a class
class person:
  def set_name(self,name):
    self.name = name
  def get_name(self):
    return self.name
p = person()
p.set_name("krishna")
print(p.get_name())

#mathematical operations
class calc:
  def add(self,a,b):
    return a+b
  def sub(self,a,b):
    return a-b
c = calc()
print(c.add(5,6))
print(c.sub(10,5))

#Using same parameters for all the def's using self
class calc:
  def set_values(self,a,b):
    self.a = a
    self.b = b
  def add(self):
    return self.a+self.b
  def sub(self):
    return self.a-self.b
  def mul(self):
    return self.a*self.b
c = calc()
c.set_values(5,6)
print(c.add())
print(c.sub())
print(c.mul())

#cal area and circumference of a circle
class circle:
  def set_values(self,r):
    self.r=r
  def area(self):
    return 3.14*self.r**2
  def circumference(self):
    return 2*3.14*self.r
c= circle()
r=int(input("Enter the radius : "))
c.set_values(r)
print("Area :",c.area())
print("Circumference:",c.circumference())

#cal pythogorum problem
import math
class pyt:
  def set_values(self,a,b):
    self.a=a
    self.b=b
  def cal(self):
    return math.sqrt(self.a**2+self.b**2)
p=pyt()
a=int(input("Enter the value of a : "))
b=int(input("Enter the value of b : "))
p.set_values(a,b)
print(p.cal())

#usage of __init__:
class person:
  def __init__(self,name,height,weight):
    self.name=name
    self.height=height
    self.weight=weight
p=person("krishna",5.11,70)
print(p.name,p.height,p.weight)

#Default parameters
class book:
  def __init__(self,title,author="Unknown",year= 2000):
    self.title=title
    self.author=author
    self.year=year
b1 = book("CNS")
b2 = book("CC","Sai",2025)
print(b1.title,b1.author,b1.year)
print(b2.title,b2.author,b2.year)

# List or collections through the class
class shopping:
  def __init__(self):
    self.items= []
  def add_items(self,item):
    self.items.append(item)
  def remove_items(self,item):
    self.items.remove(item)
  def show_items(self):
    for item in self.items:
      print(item)
cart = shopping()
print("1. Add items , 2. remove items , 3. show items")
res=int(input("Enter your choice : "))
while res!=0:
  if res==1:
    res1=int(input("Enter the number of items : "))
    for i in range(res1):
      item=input("Enter the item : ")
      ecart.add_items(item)
  elif res==2:
    print("added items")
    print(cart.show_items())
    item=input("Enter the item : ")
    cart.remove_items(item)
  elif res==3:
    print(cart.show_items())

#class with direct
class student:
  def __init__(self,name):
    self.name=name
    self.grades={}
  def add_grades(self,subject,grade):
    self.grades[subject]=grade
s=student("krishna")
s.add_grades("math",90)
s.add_grades("science",95)
print(s.name)
print(s.grades)

#code for the del method --- __del__()
class abc():
  classvar =0
  def __init__(self,var):
    abc.classvar+=1
    self.var=var
    print("the object value is:",self.var)
    print("the value of class variable is :",abc.classvar)
  def __del__(self):
    abc.classvar-=1
    print("object with value %d is going out of scope" %self.var)
obj1=abc(10)
obj2=abc(20)
obj3=abc(30)
del obj1
del obj2
del obj3

# number operations to perform simple arthemetic operations by class and delete the call
class numpos:
  def __init__(self,a,b):
    self.a=a
    self.b=b
    print(f"initialized with a={a} and b={b}")
  def add(self):
    return self.a+self.b
  def sub(self):
    return self.a-self.b
  def mul(self):
    return self.a*self.b
  def div(self):
    if self.a!=0:
      return self.a/self.b
    else:
      print("Divide by zerq error!!!")
  def __del__(self):
    print(f"deleting obj with a={self.a} and b={self.b}")
n1= int(input("Enter the value of a : "))
n2= int(input("Enter the value of b : "))
op=numpos(n1,n2)
print("Addition :",op.add())
print("Subtraction :",op.sub())
print("Multiplication :",op.mul())
print("Division :",op.div())
del op

# get item and set item using a list
class nums:
  def __init__(self,mylist):
    self.mylist = mylist
  def __getitem__(self, index):
    return self.mylist[index]
  def __setitem__(self, index , value):
    self.mylist[index]= value
numlist= nums([10,20,30,40,50])
print(numlist[2])
numlist[2]=60
print(numlist.mylist)

# public and private variables
class abc():
  def __init__(self,v1,v2):
    self.v1 = v1
    self.__v2 = v2
  def display (self):
    print("from class method , var1=",self.v1)
    print("from class method , var2=",self.__v2)
obj = abc(1,2)
obj.display()
print("from class method , var1=",obj.v1)
print("from class method , var2=",obj.__v2)

'''code that uses a class to store the name and marks of a student use a list to store the marks of 3 bubjects.
1. create a class student
2. create a function in the class with in the range of three subjects
3. take manual inputs of the marks to be apprehended in the list
4. display the name of the student along with marks in a list'''

class student:
  def __init__(self,name):
    self.name=name
    self.marks=[]
  def entermarks(self):
    for i in range(3):
      m=int(input("enter the marks of %s in the subject %d"%(self.name , i+1)))
      self.marks.append(m)
  def showmarks(self):
    print(f"{self.name} got following marks{self.marks}")
n=input('enter 1st name:')
s1=student(n)
s1.entermarks()
n2=input('enter 2st name:')
s2=student(n2)
s2.entermarks()
s1.showmarks()
s2.showmarks()

# inheritance multiple
# create a super class from a constructor and call the base class
class base1(object):
  def __init__(self):
    super(base1, self).__init__()
    print("Base class-1")
class base2(object):
  def __init__(self):
    super(base2, self).__init__()
    print("Base class-2")
class base3(object):
  def __init__(self):
    super(base3, self).__init__()
    print("Base class-3")
class derived(base1,base3,base2):
  def __init__(self):
    super(derived, self).__init__()
    print("Derived class")
d= derived()

''' code to inherit add() from addition base and sub() from subtract base and create a own multiply in the derived
class of calc pass the values for the obj to the class of inheritence multiply
num1 = 10
num2 =5


'''

class addition:
  def add(self,a,b):
    return a+b
class subtract:
  def sub(self,a,b):
    return a-b
class calc(addition,subtract):
  def mul(self,a,b):
    return a*b
c = calc()
n1= int(input("Enter the value of a : "))
n2= int(input("Enter the value of b : "))
print("Addition:",c.add(n1,n2))
print("Difference:",c.sub(n1,n2))
print("Product:",c.mul(n1,n2))

''' import math for claculating sq.cube by multiple inheritence and summate the both'''

import math
class square:
  def sqt(self,a):
    return math.pow(a,2)
class cube:
  def cb(self,b):
    return math.pow(b,3)
class calc(square,cube):
  def summate(self,a,b):
    return self.sqt(a)+self.cb(b)
c = calc()
n1= int(input("Enter the value of a : "))
n2= int(input("Enter the value of b : "))
print("Summation:",c.summate(n1,n2))

class levels:      #base class
  def name(self):
    print("one")
class step(levels): #class derived from levels
  def help(slef):
    print("two")
class run(step):
  def take(self):
    print("three")
a = run()
a.name()
a.help()
a.take()

class square:
  def square (self, num):
    return num**2
class cube(square):
  def cube (self , num):
    return num**3
class Total(cube):
  def total(self, num):
    sq = self.square(num)
    cu = self.cube(num)
    return sq+cu
calc = Total()
n = int ( input("enter the value of n:"))
print("Number:",n)
print("Square:",calc.square(n))
print("Cube:",calc.cube(n))
print("Total:",calc.total(n))

# abstract methodology
from abc import ABC, abstractmethod
import abc
class vehicle(ABC): #abstract method
  def move(self): #subclasses implementation by abstarct method
    pass
  def stop(self): #method shared my all subclasses
    return "stopped !!!"
class car(vehicle):
  def move(self):
    return "Drives on the road!!!!"
class boat(vehicle):
  def move(self):
    return "sail on water!!!!"
car = car()
boat = boat()
print(car.move())
print(boat.move())
print(car.stop())
print(boat.stop())

from abc import ABC, abstractmethod
class animal(ABC):
  def sound(self):
    pass
  def sleep(self):
    return "Zzzzzz......"
class dog(animal):
  def sound(self):
    return "Bark..."
class cat(animal):
  def sound(self):
    return "meow..."
dog = dog()
cat = cat()
print("Dog",dog.sound())
print("Dog",dog.sleep())
print("Cat",cat.sound())
print("Cat",cat.sleep())

''' create a abstaract method for deifferent shapes to calculte the area of the respective shapes through concrete subclasses . return the values by passing different args
circle: pass 5 as radius
square: pass 4 as side '''
from abc import ABC, abstractmethod
class area (ABC):
  def square(self,side):
    return side**2
  def circle(self,radius):
    return 3.14*radius**2
class square(area):
  def area(self,side):
    return self.square(side)
class circle(area):
  def area(self,radius):
    return self.circle(radius)
s = int(input("Enter squre Side length:"))
r = int(input("Enter Radius of circle:"))
sq = square()
cr = circle()
print("Square area:",sq.area(s))
print("Circle area:",cr.area(r))

''' create a abstaract method for deifferent shapes to calculte the area of the respective shapes through concrete subclasses . return the values by passing different args
circle: pass 5 as radius
square: pass 4 as side '''
from abc import ABC, abstractmethod
class shape (ABC):
  def area(self):
    pass
class square(shape):
  def __init__(self,side):
    self.side = side
  def area(self):
    return self.side**2
class circle(shape):
  def __init__(self,radius):
    self.radius = radius
  def area(self):
    return 3.14*self.radius**2
s = int(input("Enter squre Side length:"))
r = int(input("Enter Radius of circle:"))
sq = square(s)
cr = circle(r)
print("Square area:",sq.area())
print("Circle area:",cr.area())

#math operations using abstract method with subclasses of arthemetic ops
from abc import ABC, abstractmethod
class op(ABC):
  def cal(a,b):
    pass
  def gen(self):
    return " This is a sample math operarions, when ever you call it will work "
class addition(op):
  def __init__(self,a,b):
    self.a=a
    self.b=b
  def cal(self):
    return self.a+self.b
class subtraction(op):
  def __init__(self,a,b):
    self.a=a
    self.b=b
  def cal(self):
    return self.a-self.b
a=int(input("Enter the value of a:"))
b=int(input("Enter the value of b:"))
add=addition(a,b)
sub=subtraction(a,b)
print(add.gen())
print(add.cal())
print(sub.gen())
print(sub.cal())

#simple overloading
def name(str= 'ajay'):
  print('hello',str)
name()
name('vijay')

# *args with numbers
def abc(*args):
  return sum(args)
print(abc(1,2,3,4,5))

#operators overloading
class val:
  def __init__(self,a,b):
    self.a=a
    self.b=b
  def __add__(self,other):
    return self.a+other.a,self.b+other.b
v1=val(1,2)
v2=val(3,4)
print(v1+v2)

'''program to add two complex numbers using method overload and print the total the imaginary and real number
a=1+2i
b=3+4i
output=4+6i
'''
class complex:
  def __init__(self,r=0,i=0):
    self.r=r
    self.i=i
  def __add__

#over-riding method in a sub class
class vehicle:
  def start(self):
    print("vehicle is starting !")
class car(vehicle):
  def start(self):
    print("car is starting !")
class bike(vehicle):
  def start(self):
    print("Bike is strating !")
v = vehicle()
c = car()
b = bike()
v.start()
c.start()
b.start()

''' over-riding , calling superclass attributes program to caliculate the area of circle by method overriding by calling the superclass function. '''
class shape:
  def area(self):
    print("Deploy area of circle")
class circle(shape):
  def area(self):
    print("Calculating")
    super().area()
c = circle()
c.area()

#passing the args and return values
'''program to pass args of salaries of different esignated employees from a super class to sub classes ake super
class as employee and derived class as manager and developper accordingly and pass the amount with 10% and 20% bonus '''
class employee:
  def salary(self,cash):
    print(f" Employee salary is {cash}")
class manager(employee):
  def salary(self,cash):
    print(f" Manager salary is", round(cash*1.1))
class developer(employee):
  def salary(self,cash):
    print(f" Developer salary is", round(cash*1.2))
e = employee()
m = manager()
d = developer()
e.salary(50000)
m.salary(50000)
d.salary(50000)

class person():
  def hi(self):
    return "Hello, How are ya !!!"
class friend(person):
  def hi(self):
    return "Hello, How are ya frnd !!!"
class stranger(person):
  def hi(self):
    return "Hello, How are ya str !!!"

p = person()
f = friend()
s = stranger()
print(p.hi())
print(f.hi())
print(s.hi())

# map function split function-

